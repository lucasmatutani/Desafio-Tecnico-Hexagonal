📦 inventory-service/
│
├── 📄 pom.xml                              (Maven - Java 21, Spring Boot 3.4.0)
├── 📄 .gitignore                           (Git ignore)
├── 📄 README.md                            (Documentação principal)
├── 📄 ARCHITECTURE.md                      (Guia de arquitetura hexagonal)
├── 📄 verify-structure.sh                  (Script de verificação)
│
├── 📁 src/main/
│   ├── 📁 java/com/inventory/
│   │   │
│   │   ├── 📄 InventoryServiceApplication.java  (Classe principal)
│   │   │
│   │   ├── 📁 domain/                      [CAMADA DE DOMÍNIO]
│   │   │   ├── 📁 model/                   ← Entidades de negócio (Product, Inventory)
│   │   │   ├── 📁 event/                   ← Eventos de domínio (ProductCreated)
│   │   │   ├── 📁 policy/                  ← Políticas de negócio (StockPolicy)
│   │   │   ├── 📁 service/                 ← Serviços de domínio (PricingService)
│   │   │   └── 📁 exception/               ← Exceções de domínio
│   │   │
│   │   ├── 📁 application/                 [CAMADA DE APLICAÇÃO]
│   │   │   ├── 📁 port/
│   │   │   │   ├── 📁 input/               ← Use Cases (CreateProductUseCase)
│   │   │   │   └── 📁 output/              ← Portas de saída (ProductRepository)
│   │   │   └── 📁 service/                 ← Implementação dos Use Cases
│   │   │
│   │   └── 📁 adapters/                    [CAMADA DE ADAPTADORES]
│   │       ├── 📁 input/
│   │       │   └── 📁 rest/                ← Controllers REST (ProductController)
│   │       └── 📁 output/
│   │           ├── 📁 persistence/         ← Repositórios JPA (ProductRepositoryAdapter)
│   │           └── 📁 messaging/           ← Event Publishers (SnsEventPublisher)
│   │
│   └── 📁 resources/
│       └── 📄 application.yml              (Configurações Spring Boot)
│
└── 📁 target/                              (Artefatos de build)

═══════════════════════════════════════════════════════════════════

🎯 FLUXO DE DEPENDÊNCIAS:

┌─────────────────────────────────────────────────────────────────┐
│                        REST Controller                          │
│                  (adapters/input/rest)                          │
└────────────────────────────┬────────────────────────────────────┘
                             │
                             ↓
┌─────────────────────────────────────────────────────────────────┐
│                        Use Case Interface                       │
│                  (application/port/input)                       │
└────────────────────────────┬────────────────────────────────────┘
                             │
                             ↓
┌─────────────────────────────────────────────────────────────────┐
│                    Use Case Implementation                      │
│                    (application/service)                        │
└────────────────────────────┬────────────────────────────────────┘
                             │
                             ↓
┌─────────────────────────────────────────────────────────────────┐
│                         DOMAIN LAYER                            │
│         (model, event, policy, service, exception)              │
│                    ⚠️  SEM DEPENDÊNCIAS                         │
└────────────────────────────┬────────────────────────────────────┘
                             │
                             ↓
┌─────────────────────────────────────────────────────────────────┐
│                      Output Port Interface                      │
│                  (application/port/output)                      │
└────────────────────────────┬────────────────────────────────────┘
                             │
                             ↓
┌─────────────────────────────────────────────────────────────────┐
│                       Output Adapters                           │
│            (adapters/output/persistence|messaging)              │
└─────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════

📚 TECNOLOGIAS INCLUÍDAS:

✅ Spring Boot 3.4.0
✅ Java 21
✅ Spring Data JPA
✅ H2 Database (desenvolvimento)
✅ Lombok
✅ MapStruct
✅ AWS SDK (SQS, SNS)
✅ Resilience4j (Circuit Breaker, Retry, Rate Limiter)
✅ Spring Actuator + Prometheus
✅ OpenAPI/Swagger
✅ ArchUnit (testes de arquitetura)

═══════════════════════════════════════════════════════════════════

🚀 COMANDOS ÚTEIS:

# Compilar
mvn clean compile

# Executar
mvn spring-boot:run

# Testar
mvn test

# Verificar estrutura
./verify-structure.sh

# Acessar aplicação
http://localhost:8081

# H2 Console
http://localhost:8081/h2-console

# Swagger
http://localhost:8081/swagger-ui.html

# Metrics
http://localhost:8081/actuator/prometheus

